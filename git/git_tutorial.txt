# Git repository migration
> Clone the Source Repository:
git clone --mirror <source_repository_url>

> Navigate to the Cloned Repository
cd <cloned_repository_directory>

> Add the Destination Repository as a Remote
git remote add <destination_repository_name> <destination_repository_url>

> Fetch Data from the Destination Repository
git fetch --all

> Push All Branches and Tags to the Destination Repository
git push --mirror <destination_repository_name>


# Basic concepts

## Initialize a repository
Using this command inside a folder, we will create a local git repository. A folder called ".git" will be placed into the mentioned folder. Removing this ".git" we remove the entire git local repository management.
```sh
git init
```

## Ignoring files on git
1. Creates a file called ".gitignore"
1. Put all the file names that you don't want to be versioned into this file
    - Git recognizes wildcards: Ex: *.py
    - You must add one item per line

## Git stages
Git has three different stages, they are:

- Working Directory: local repository containing your modified files
- Staging Area: When we add a new file to git, this file will be in this area, ready to be committed
- .git Directory: After the commit, the files goes to the local “.git” repository

# Basic Work flow

## Working with remote branchs
1. Create a remote Branch
    ```sh
    git push --set-upstream origin <branch-name>
    #    OR
    git push -u origin <branch-name>
    ```
1. Modify files
1. Commit changes and send for revision
    - Gerrit:
    ```sh
    git push origin HEAD:refs/for/<branch-name>
    ```
    - Bitbucket
    ```sh
    git push origin HEAD:<branch-name>
        ```
1. Perform merge into desired branchs
1. Delete remote Branch
    ```sh
    git push origin --delete <branch-name>
    ```

## Working with local branch and partial commits
This is a good practice because one can register the corrent work in a separe environment so that you can work in many features at the same time, perform partial commits to register progress and than merge all necessary commits in one, so that you remove commits that inserted errors, an push to remote repo

1. Create a local branch based on the desired branch base (Ex: master)
    ```sh
    git checkout <desired branch base/commit base>
    git branch <desired name>
    git checkout <branch name created>
    ```
1. Perform the desired modifications
1. Commit each meaningful modification in a separeted commit
    - If you have new files, execute:
        ```sh
            git add <files>
            ```
    - Add all tackled file modifications
        ```sh
            git add -u
            ```
    - Create a commit
        ```sh
            git commit
        ```
1. If yoy have more modifications, execute step 3 until you perform al desired modifications
1. Now you have several local commits, but you want to perform a merge and create a single push. To do this, run
    ```sh
    git rebase --interactive <commit ID of the commit just prior to the set of commits you want to squash into one>
    ```
1. In the next window that will appear
    - Change all the pick to squash (or s) except the first one
1. Save and exit the editor
1. Then another text editor will open to let you combine the commit messages from all of the commits into one big commit message.
    - Format and modify what you want
1. To see all modifications that will be commited
    - This will compare current commit (HEAD) with the it's previous one
    ```sh
    git diff HEAD^ HEAD
    ```
1. Push modifications to review on remote repo
    - Gerrit:
    ```sh
    git push origin HEAD:refs/for/<branch-name>
    ```
    - Bitbucket
    ```sh
        git push origin HEAD:<branch-name>
    ```

# Useful Commands

## Creating patchset
```sh
git format-patch -1 <commit hash>
```

## Cloning a remote repository
```sh
git clone <url> <where to clone>
```

## Showing the status
There two basic forms to do this

- Show untracked and tracked files of the current branch
    ```sh
        git status
        ```
- Show just tracked files of the current branch
    ```sh
        git status -uno
        ```

# Showing git configurations
```sh
git config --list
```

## Removing files
- Removing a file from the Staging Area
    ```sh
    git checkout <file-name>
    ```
- Removing all untracked files
    - This command remove from the disk all files that are not versioned, so beware of it before use this command. The -d option is to remove directories also.
    ```sh
    git clean -fd
    ```
    - In case of a repository with some directories or even files owned by root, it may be necessary to run this before the command above:
    ```sh
    git config --global --add safe.directory <path to the root git repository>
    ```

## Git Stash
- Adding modified files to stash list
    ```sh
        git stash
    ```
- Applying stashed files into current branch and removing it from stash list
    ```sh
        git stash pop
    ```
- Applying stashed files into current branch but does not removing it from stash list
    ```sh
        git stash apply
    ```

## Adding modified files or new ones to be committed
Every time you want to submit a new or a modified file(s) it will be necessary to use this command. After this, the files will be transferred from your working area to your staging area.

- Add a single file
    ```sh
        git add <file name or list of files separeted by spaces>
    ```
- Add all modified files and ignore untracked ones
    ```sh
        git add -u
    ```

## Reverting/Removing a local file changes
- Removing a specific file or list of files from staging area
    ```sh
        git checkout -- <file name>
    ```
- Unstage files
    - This command unstage the local commit and files, but does not remove them
    ```sh
        git reset --soft HEAD^
    ```sh
- Remove a local commit and go back to the <branch name> or a specific commit
    - This processo will remove modified files
    ```sh
        git reset --hard origin/master
        #  OR
        git reset --hard <COMMIT -ID>
        ```

## Commiting changes
- Committing added changes/files
        - Passaing a massage
            $ git commit -m "your message here"
        - Editing the massage on deafult editor
            $ git commit

    > Committing and adding with a single step
        - Executing “git add” and “git commit -m "your message here" in a single command
            $ git commit -a -m "your message here"
        - Executing a "git add" and "git commit" in a single command
            $ git commit -a

    > Amending a commit
        - This command sends a new patch to the last change ID used in the previous git push ~.
            $ git commit --amend

# Showing commit logs
    > Seing log of a specific commit
        $ git log <commit hash>
    > Seing all commit log's in one line
        $ git log --oneline --decorate
    > Seing all commit log's and branch's as a graph on terminal
        $ git log --all --graph --decorate --oneline --abbrev-commit

# Getting current tag version or commit hash (if there is no tag yet)
If you want a "describe" to fall back to an abbreviated hash if it can't find any suitable tags, you can use --always.
    $ git describe --always


# Git Diff
    > This commands will display the differences between the local version and the version that is in the remote repo on the screen
        $ git diff
    > You can also use the merge tool pointed out at your git config global:
        $ git difftool <ver1 ver2>

# Branchs
    > Removing remote merged branchs from local repo
        git remote prune origin
            - This will mark merged branchs with gone
        Removing pruned branchs automaticaly
            git branch --merged master | grep -v '^[ *]*master$' | xargs git branch -d
        Removing pruned branchs manualy
            git branch -d <local branch marked as gone>
                - This will remove all local references to the merged remote branch

    > Reseting local branch to match origing (remote)
        - WARNING: This process will REMOVE ALL local modifications
        $ git fetch origin
        $ git reset --hard origin/<remote branch name>

    > Showing local and remove branchs
        - This command does not search for remote upgrades. To reflect the current state of the remote branchs, run "git pull" before.
            $ git branch -aavvvvvv

    > Synchronizing local branch to remote repo branch
        $ git branch --set-upstream-to=origin/<remote branch name>

    > Checking out a branch to work on it
        $ git checkout <branch name>

    > Checking out a not yet merged commit/patch set
        0- Navigate to the git repo using terminal
        1- Click on desired git commit on git web brownse and than click in (...) at the right side of page, by the side of EDIT
        2- Copy "Download patch set" command, ex: git fetch "ssh://tc.lbarros@gerrit.padtec.com.br:29418/fw/tools/AtualizadorFw" refs/changes/73/26573/3 && git checkout FETCH_HEAD
            - After this step, you will have a branch deatached from any other branch.
        3- Paste it into the terminal
        4- Finally: git checkout -b <desired branch name>
        After all this steps, you will be able to merge, rebase, send another patch set and etc

    > Checking out a not yet merged commit/patch set and syncronize it with a branch - METHOD TWO
        0- Navigate to the git repo that you cloned
        1- Click on desired git commit on gerrit web brownser and than click in (...) at the right side of page, by the side of EDIT
        2- Click on Download Patch
        3- Copy "Branch" command, ex: git fetch ssh://tc.lbarros@gerrit.padtec.com.br:29418/es/proj/wss-single/app refs/changes/07/45607/9 && git checkout -b
        4- Paste it into the terminal
        After all this steps, you will be able to merge, rebase, send another patch set and etc and a new local branch will be created

    > Synchronizing a local branch to the last version pointed in the remote repository without apply the modifications to local branch
        $ git fetch
    > Synchronizing a local branch with its correspondent remote
        $ git pull
    > Synchronizing a local branch before commit with its correspondent remote
        $ git pull --rebase

    > Creating a remote branch from current commit
        $ git push --set-upstream origin <branch-name>
            OR
        $ git push -u origin <branch-name>
        
    > Creating a remote branch from an old commit
        $ git branch <local branch name> <old commit hash>
        $ git checkout <local branch name>
        $ git push --set-upstream origin HEAD:<remote branch-name>

    > Creating a branch from current branch HEAD version
        $ git branch <branch name>

    > Creating a local branch from a specific change of git
        $ git branch <branch name> <commit hash>

    > Creating a local branch and synchronizing it with the the remote branch:
        $ git checkout -b <branch name> origin/<remote branch name>

    > Getting just one commit and applying it on current branch
        $ git cherry-pick <commit HASH>

    > Getting a set of commits and applying it on current branch
        $ git cherry-pick <commit HASH first desired commit>^..<commit HASH last desired commit>

    > Merging branchs
        $ git checkout <branch name>
        $ git merge <branch-name to be merged>

    > Solving merge conflicts using an external tool
        $ git mergetool

    > Renaming a local branch
        $ git branch -m <new name>

    > Removing branchs
        - Removing a local branch
            $ git branch -d <branch name>
        - Removing <branch-name> from remote repository
            $ git push origin --delete <branch-name>

    > Reverting a remote commit already merged
        - This process will create a new commit that will undo the changes applied by the commit that you want to be reverted.
            * After the above process, it is necessary to send the modification to the remote branch, ex: git push origin master
            $ git revert <commit_hash>


    > Sending changes to the remote repository
        - Send modificatioins on <branch name> to its correspondent remote branch without pass through gerrit/bibucket check
            $ git push origin <branch name>
        - Send local modifications on <branch name> to gerrit review
            $ git push origin HEAD:refs/for/<branch name>

#TODO: write it better
# Creating a local branch based on a change and synchronizing it with a branch
    0- Navigate to the git repo that you cloned
    1- Click on desired git commit on gerrit web brownser and than click in (...) at the right side of page, by the side of EDIT
    2- Click on Download Patch
    3- Copy "Checkout" command, ex: git fetch ssh://tc.lbarros@gerrit.padtec.com.br:29418/es/proj/wss-single/app refs/changes/07/45607/10 && git checkout FETCH_HEAD
    4- After this step, you will be deatached from any branch
    5- Create a local branch: git branch -b <desired branch name>
    6 Synchronize it with remote branch: git branch --set-upstream-to=origin/<remote branch name> <desired branch name>

# Rebase
    > Iterative rebase
        - Reference: https://thoughtbot.com/blog/git-interactive-rebase-squash-amend-rewriting-history
        - git rebase -i <commit/branch>
            * Ex: git rebase -i master, rebase current change with master branch.
        - edit the file that will open reading the messages. If you wat to remove a reference to another commit, just remove it from the list??

    > Rebasing local change with a remote one
        0- git fetch ssh://tc.lbarros@gerrit.padtec.com.br:29418/es/proj/wss-single/app refs/changes/04/46904/5 && git checkout FETCH_HEAD
        1- git rebase 18d5ffc e080027
            > 18d5ffc: change to be applyed
            > e080027: change to be rebased with 18d5ffc (git fetch)

    > Rebasing a local Synchronized branch with its parent
        0- Inside your local branch
        1- git fecth # this will get latest modifications of remote tracked branch, but not aplly it
        2- git rebase # this will apply the modifications
        3- Then you can resolve the current conflits, if there is any. After resolve the conflit on files, use git add on the files.
        4- Than use: git reabse --continue
        5- Now your local modifications will rebased using the new parant branch commit

# Tags
    > Creating a tag based on current branch HEAD version
        $ git tag -a <tag version/name> -m "Message here"
    > Creating a tag based on a specific branch change/revision
        $ git tag -a <tag version/name> <revision base, ex: 9fceb02> -m "Message here"

    > Deleting a remote tag
        $ git push --delete origin <tag_name>

    > Pushng a single tag
        $ git push origin <tag_name>
    > Pushing all local tags to the remote repository
        $ git push --tags

    > Show all the tags
        $ git tag
    > Checkout a tag to a local branch
        $ git checkout -b <branch name> <tag version/name>
